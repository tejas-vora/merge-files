{"version":3,"sources":["logo.svg","components/table.js","components/Merge.js","components/ExcelReader.js","App.js","reportWebVitals.js","index.js","components/types.js"],"names":["Table","tableData","useState","jsonData","setJsonData","jsonData1","setJsonData1","useEffect","fetch","then","response","json","data","catch","err","console","log","getNumber","PartyNmae","partyData","partyNumber","length","find","NAME","NUMBER","undefined","class","scope","window","innerWidth","map","key","PartyName","Bill","Cash","TotalAmount","onClick","message","encodeURI","open","sendMessage","className","id","r","document","createRange","selectNode","getElementById","getSelection","removeAllRanges","addRange","execCommand","toast","CopyToClipboard","Merge","withData","withOutData","finalData","setFinalData","setData","mergeArray","arr","outputObj","counter","obj","finalResult","name","amt","amt1","parseInt","push","sort","a","b","index","findIndex","p","splice","dateObj","Date","month","getMonth","output","String","getDate","padStart","getFullYear","ExcelFile","ReactExport","ExcelSheet","ExcelColumn","result","value","collateArray","filename","label","ExcelReader","setWithData","setWithOutData","handleChange","e","file","reader","FileReader","rABS","readAsBinaryString","onload","bstr","target","wb","XLSX","read","type","bookVBA","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","readAsArrayBuffer","handleFile","files","htmlFor","accept","SheetJSFT","onChange","App","pauseOnFocusLoss","autoClose","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","x","join"],"mappings":"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","file":"static/js/main.6b6bb258.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect, useState } from \"react\";\nimport { toast } from \"react-toastify\";\n// import jsonData from \"../db.json\";\n\nconst Table = ({ tableData }) => {\n  const [jsonData, setJsonData] = useState([]);\n  const [jsonData1, setJsonData1] = useState([]);\n\n  function CopyToClipboard(id) {\n    var r = document.createRange();\n    r.selectNode(document.getElementById(id));\n    window.getSelection().removeAllRanges();\n    window.getSelection().addRange(r);\n    document.execCommand(\"copy\");\n    window.getSelection().removeAllRanges();\n    toast(\"copy to clipboard\");\n  }\n\n  useEffect(async () => {\n    await fetch(\"https://629224419d159855f0865064.mockapi.io/testapi\")\n      .then((response) => response.json())\n      .then((data) => setJsonData(data))\n      .catch((err) => console.log(err));\n\n    await fetch(\"https://629224419d159855f0865064.mockapi.io/test1api\")\n      .then((response) => response.json())\n      .then((data) => setJsonData1(data))\n      .catch((err) => console.log(err));\n  }, []);\n\n  const sendMessage = (PartyName, Bill, Cash) => {\n    let message = `Dear Sir,\n    an amount is Due\n    BILL Rs *${Bill == 0 ? \"00\" : Bill}*\n    CASH Rs *${Cash == 0 ? \"00\" : Cash}*\n    please take into consideration`;\n    encodeURI(message);\n    if (jsonData.length !== 0) {\n      jsonData.find(({ NAME, NUMBER }) => {\n        if (NAME == PartyName) {\n          window.open(\n            `https://wa.me/91${NUMBER}?text=${encodeURI(message)}`,\n            \"_blank\"\n          );\n        }\n      });\n    }\n    if (jsonData1.length !== 0) {\n      jsonData1.find(({ NAME, NUMBER }) => {\n        if (NAME == PartyName) {\n          window.open(\n            `https://wa.me/91${NUMBER}?text=${encodeURI(message)}`,\n            \"_blank\"\n          );\n        }\n      });\n    }\n  };\n  const getNumber = (PartyNmae) => {\n    let partyData = [...jsonData, ...jsonData1];\n    let partyNumber = [];\n    if (partyData.length !== 0) {\n      partyNumber = partyData.find(({ NAME, NUMBER }) => {\n        if (NAME === PartyNmae) return NUMBER;\n      });\n    }\n    if (partyNumber !== undefined) return partyNumber.NUMBER;\n  };\n\n  return (\n    <>\n      <div>\n        {tableData.length != 0 && tableData[0] !== undefined && (\n          <table class=\"table table-responsive\">\n            <thead>\n              <tr>\n                <th scope=\"col\">PartyName</th>\n                <th scope=\"col\">Bill</th>\n                <th scope=\"col\">Cash</th>\n                <th scope=\"col\">TotalAmount</th>\n                {window.innerWidth > 800 && <th scope=\"col\">Message</th>}\n                <th>Number</th>\n              </tr>\n            </thead>\n            <tbody>\n              {tableData.map(({ PartyName, Bill, Cash, TotalAmount }, key) => (\n                <tr key={key}>\n                  <th\n                    onClick={() => sendMessage(PartyName, Bill, Cash)}\n                    className=\"pointer\"\n                  >\n                    {PartyName}\n                  </th>\n                  <td>{Bill}</td>\n                  <td>{Cash}</td>\n                  <td>{TotalAmount}</td>\n                  {window.innerWidth > 800 && (\n                    <td>\n                      <div\n                        id={`copy${key}`}\n                        className=\"pointer\"\n                        onClick={() => CopyToClipboard(`copy${key}`)}\n                      >\n                        <div>Dear Sir,</div>\n                        <div>an amount is Due</div>\n                        <div>BILL Rs *{Bill == 0 ? \"00\" : Bill}*</div>\n                        <div>CASH Rs *{Cash == 0 ? \"00\" : Cash}*</div>\n                        <div>please take into consideration</div>\n                      </div>\n                    </td>\n                  )}\n                  <td>{getNumber(PartyName)}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n      </div>\n    </>\n  );\n};\nexport default Table;\n","import React, { useState, useEffect } from \"react\";\nimport ReactExport from \"react-data-export\";\nimport Table from \"./table\";\n\nconst Merge = ({ withData, withOutData }) => {\n  const [finalData, setFinalData] = useState([]);\n  const [data, setData] = useState([]);\n\n  function mergeArray(arr) {\n    var outputObj = {};\n    for (var counter = 0; counter < arr.length; counter++) {\n      var obj = arr[counter];\n      for (var key in obj) {\n        if (!outputObj[key]) {\n          outputObj[key] = obj[key];\n        }\n      }\n    }\n    return outputObj;\n  }\n  function collateArray(withData, withOutData) {\n    var arr = [...withData, ...withOutData];\n    var outputObj = {};\n    var result = [];\n    for (var counter = 0; counter < arr.length; counter++) {\n      var obj = arr[counter];\n      var value = obj[\"name\"];\n      if (!outputObj[value]) {\n        outputObj[value] = [];\n      }\n      outputObj[value].push(obj);\n    }\n    for (var key in outputObj) {\n      result.push(mergeArray(outputObj[key]));\n    }\n    setData(result);\n  }\n\n  useEffect(() => {\n    let finalResult = [];\n    if (data.length != 0) {\n      data.map(({ name, amt, amt1 }) => {\n        if (\n          (amt1 == undefined ? 0 : parseInt(amt1)) +\n            (amt == undefined ? 0 : parseInt(amt)) !=\n          0\n        ) {\n          finalResult.push({\n            PartyName: name,\n            Bill: amt1 == undefined ? 0 : parseInt(amt1),\n            Cash: amt == undefined ? 0 : parseInt(amt),\n            TotalAmount:\n              (amt1 == undefined ? 0 : parseInt(amt1)) +\n              (amt == undefined ? 0 : parseInt(amt)),\n          });\n        }\n      });\n    }\n\n    finalResult.sort((a, b) =>\n      a.PartyName > b.PartyName ? 1 : b.PartyName > a.PartyName ? -1 : 0\n    );\n    var index = finalResult.findIndex((p) => p.PartyName == \"Grand Total\");\n    finalResult.push(finalResult.splice(index, 1)[0]);\n    setFinalData(finalResult);\n\n    console.log(finalResult);\n  }, [data]);\n\n  const monthNames = [\n    \"01\",\n    \"02\",\n    \"03\",\n    \"04\",\n    \"05\",\n    \"06\",\n    \"07\",\n    \"08\",\n    \"09\",\n    \"10\",\n    \"11\",\n    \"12\",\n  ];\n  const dateObj = new Date();\n  const month = monthNames[dateObj.getMonth()];\n  const day = String(dateObj.getDate()).padStart(2, \"0\");\n  const year = dateObj.getFullYear();\n  const output = day + \"/\" + month + \"/\" + year;\n  const ExcelFile = ReactExport.ExcelFile;\n  const ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\n  const ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\n\n  return (\n    <>\n      <div className=\"my-3\">\n        <button\n          className=\"btn btn-primary  mx-3\"\n          onClick={() => collateArray(withData, withOutData)}\n        >\n          Merge\n        </button>\n        <ExcelFile filename={`Payment Details-${output}`}>\n          <ExcelSheet data={finalData} name=\"customer\">\n            <ExcelColumn label=\"PartyName\" value=\"PartyName\" />\n            <ExcelColumn label=\"Bill\" value=\"Bill\" />\n            <ExcelColumn label=\"Cash\" value=\"Cash\" />\n            <ExcelColumn label=\"TotalAmount\" value=\"TotalAmount\" />\n          </ExcelSheet>\n        </ExcelFile>\n      </div>\n      <Table tableData={finalData} />\n    </>\n  );\n};\n\nexport default Merge;\n","import React, { useState } from \"react\";\nimport XLSX from \"xlsx\";\nimport Merge from \"./Merge\";\nimport { SheetJSFT } from \"./types\";\n\nconst ExcelReader = () => {\n  const [withData, setWithData] = useState([]);\n  const [withOutData, setWithOutData] = useState([]);\n\n  const handleFile = (file, value) => {\n    /* Boilerplate to set up FileReader */\n    const reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n\n    reader.onload = (e) => {\n      /* Parse data */\n      const bstr = e.target.result;\n      const wb = XLSX.read(bstr, {\n        type: rABS ? \"binary\" : \"array\",\n        bookVBA: true,\n      });\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      if (value == \"withData\") {\n        setWithData(XLSX.utils.sheet_to_json(ws));\n      } else if (value == \"withOutData\") {\n        setWithOutData(XLSX.utils.sheet_to_json(ws));\n      }\n    };\n\n    if (rABS) {\n      reader.readAsBinaryString(file);\n    } else {\n      reader.readAsArrayBuffer(file);\n    }\n  };\n  const handleChange = (e, value) => {\n    handleFile(e.target.files[0], value);\n  };\n\n  return (\n    <>\n      <div className=\"input_field\">\n        <div>\n          <label htmlFor=\"file\">With File </label>\n          <input\n            type=\"file\"\n            className=\"form-control\"\n            id=\"file\"\n            accept={SheetJSFT}\n            onChange={(e) => handleChange(e, \"withData\")}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"file1\">With Out File </label>\n          <input\n            type=\"file\"\n            className=\"form-control\"\n            id=\"file1\"\n            accept={SheetJSFT}\n            onChange={(e) => handleChange(e, \"withOutData\")}\n          />\n        </div>\n      </div>\n      <Merge withData={withData} withOutData={withOutData} />\n    </>\n  );\n};\n\nexport default ExcelReader;\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport ExcelReader from \"./components/ExcelReader\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ExcelReader />\n      <ToastContainer pauseOnFocusLoss={false} autoClose={3000} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","const SheetJSFT = [\n  \"xlsx\",\n  \"xlsb\",\n  \"xlsm\",\n  \"xls\",\n  \"xml\",\n  \"csv\",\n  \"txt\",\n  \"ods\",\n  \"fods\",\n  \"uos\",\n  \"sylk\",\n  \"dif\",\n  \"dbf\",\n  \"prn\",\n  \"qpw\",\n  \"123\",\n  \"wb*\",\n  \"wq*\",\n  \"html\",\n  \"htm\",\n]\n  .map(function (x) {\n    return \".\" + x;\n  })\n  .join(\",\");\n"],"sourceRoot":""}